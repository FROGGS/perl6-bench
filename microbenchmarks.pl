[
 # empty test MUST appear first, so that --ignore-startup will work
 {
  name  => 'empty',
  perl5 => '',
  perl6 => '',
  nqp   => '',
 },
 {
  name  => 'zero',
  perl5 => '0',
  perl6 => '0',
  nqp   => '0',
 },
 {
  name  => 'hello',
  perl5 => 'say "Hello, World!"',
  perl6 => 'say "Hello, World!"',
  nqp   => 'say("Hello, World!")',
 },
 {
  name  => 'while_empty_1e5',
  perl5 => 'my $i = 0; while (++$i <= 100000) { }',
  perl6 => 'my $i = 0; while (++$i <= 100000) { }',
  nqp   => 'my $i := 0; while ($i := $i + 1) <= 100000 { }',
 },
 {
  name  => 'while_empty_1e6',
  perl5 => 'my $i = 0; while (++$i <= 1000000) { }',
  perl6 => 'my $i = 0; while (++$i <= 1000000) { }',
  nqp   => 'my $i := 0; while ($i := $i + 1) <= 1000000 { }',
 },
 {
  name  => 'while_bind_1e5',
  perl5 => undef,
  perl6 => 'my $a := 0; my $b := 1; my $i = 0; while (++$i <= 100000) { $a := $b }',
  nqp   => 'my $a := 0; my $b := 1; my $i := 0; while ($i := $i + 1) <= 100000 { $a := $b }',
 },
 {
  name  => 'while_concat_1e5',
  perl5 => 'my $s = ""; my $i = 0; while (++$i <= 100000) { $s .= "x" }',
  perl6 => 'my $s = ""; my $i = 0; while (++$i <= 100000) { $s ~= "x" }',
  nqp   => 'my $s := ""; my $i := 0; while ($i := $i + 1) <= 100000 { $s := $s ~ "x" }',
 },
 {
  name  => 'while_push_1e3',
  perl5 => 'my @a; my $i = 0; while (++$i <= 1000) { push @a, 1 }',
  perl6 => 'my @a; my $i = 0; while (++$i <= 1000) { push @a, 1 }',
  nqp   => 'my @a; my $i := 0; while ($i := $i + 1) <= 1000 { @a.push(1) }',
 },
 {
  name  => 'while_array_set_1e4',
  perl5 => 'my @a; my $i = 0; while (++$i <= 10000) { $a[ $i ] = $i }',
  perl6 => 'my @a; my $i = 0; while (++$i <= 10000) { @a[ $i ] = $i }',
  nqp   => 'my @a; my $i := 0; while ($i := $i + 1) <= 10000 { @a[ $i ] := $i }',
 },
 {
  name  => 'while_hash_set_1e4',
  perl5 => 'my %h; my $i = 0; while (++$i <= 10000) { $h{ $i } = $i }',
  perl6 => 'my %h; my $i = 0; while (++$i <= 10000) { %h{ $i } = $i }',
  nqp   => 'my %h; my $i := 0; while ($i := $i + 1) <= 10000 { %h{ $i } := $i }',
 },
 {
  name  => 'postwhile_nil_1e5',
  perl5 => 'my $i = -100000; ()  while ++$i;',
  perl6 => 'my $i = -100000; Nil while ++$i;',
  nqp   => 'my $i := -100000; () while $i := $i + 1;',
 },
 {
  name  => 'loop_empty_1e5',
  perl5 => 'for  (my $i = 1; $i <= 100000; ++$i) { }',
  perl6 => 'loop (my $i = 1; $i <= 100000; ++$i) { }',
  nqp   => undef,
 },
 {
  name  => 'for_empty_1e5',
  perl5 => 'for (1 .. 100000) { }',
  perl6 => 'for (1 .. 100000) { }',
  nqp   => undef,
 },
 {
  name  => 'for_bind_1e5',
  perl5 => undef,
  perl6 => 'my $a := 0; my $b := 1; for (1 .. 100000) { $a := $b; }',
  nqp   => undef,
 },
 {
  name  => 'for_assign_1e5',
  perl5 => 'my $a = 0; my $b = 1; for (1 .. 100000) { $a = $b; }',
  perl6 => 'my $a = 0; my $b = 1; for (1 .. 100000) { $a = $b; }',
  nqp   => undef,
 },
 {
  name  => 'for_postinc_1e5',
  perl5 => 'my $i = 0; for (1 .. 100000) { $i++ }',
  perl6 => 'my $i = 0; for (1 .. 100000) { $i++ }',
  nqp   => undef,
 },
 {
  name  => 'for_concat_1e5',
  perl5 => 'my $s = ""; for (1 .. 100000) { $s .= "x" }',
  perl6 => 'my $s = ""; for (1 .. 100000) { $s ~= "x" }',
  nqp   => undef,
 },
 {
  name  => 'for_concat_2_1e5',
  perl5 => 'my $x = "a"; my $y = ""; for (1 .. 100000) { $y .= ($x . $x) }',
  perl6 => 'my $x = "a"; my $y = ""; for (1 .. 100000) { $y ~= ($x ~ $x) }',
  nqp   => undef,
 },
 {
  name  => 'for_push_1e3',
  perl5 => 'my @a; for (1 .. 1000) { push @a, 1 }',
  perl6 => 'my @a; for (1 .. 1000) { push @a, 1 }',
  nqp   => undef,
 },
 {
  name  => 'for_array_set_1e4',
  perl5 => 'my @a; $a[ $_ ] = $_ for 1 .. 10000',
  perl6 => 'my @a; @a[ $_ ] = $_ for 1 .. 10000',
  nqp   => undef,
 },
 {
  name  => 'for_hash_set_1e4',
  perl5 => 'my %h; $h{ $_ } = $_ for 1 .. 10000',
  perl6 => 'my %h; %h{ $_ } = $_ for 1 .. 10000',
  nqp   => undef,
 },
 {
  name  => 'reduce_range_1e5',
  perl5 => 'use List::Util "reduce"; reduce { $a + $b } 1 .. 100000',
  perl6 => '[+] 1 .. 100000',
  nqp   => undef,
 },
 {
  name  => 'any_equals_1e3',
  perl5 => undef,
  perl6 => '1 == any(1 .. 1000)',
  nqp   => undef,
 },
 {
  name  => 'any_equals_5e3',
  perl5 => undef,
  perl6 => '1 == any(1 .. 5000)',
  nqp   => undef,
 },
 {
  name  => 'trim_string_1e3',
  perl5 => 'my $s = " " x 1000 . "x" x 1000 . " " x 1000; /^\s*(.*?)\s*$/s for 1 .. 1000',
  perl6 => 'my $s = " " x 1000 ~ "x" x 1000 ~ " " x 1000; $s.trim for 1 .. 1000',
  nqp   => undef,
 },
]
