# XXXX: WIP translation from Perl 6, won't compile in NQP yet!

my $RED     := "\e[1;31m";
my $CLEAR   := "\e[0m";
my $Empty   := 0;
my $Tree    := 1;
my $Burning := 2;
my @show    := ('  ', '木', $RED ~ '木' ~ $CLEAR);

class Forest {
    has @!grid;
    has @!neighbors;
    has $!height;
    has $!width;
    has $!p;
    has $!f;

    method new($height, $width, $p=0.01, $f=0.001) {
        my $c := self.bless(:$height, :$width, :$p, :$f);
        $c.init-grid;
        $c.init-neighbors;
        return $c;
    }

    method init-grid () {
        # @!grid := [ (pir::rand__NN(1.0) < .5 ?? $Tree !! $Empty) xx $!width ] xx $!height;
        my $i := 0;
        while $i < $!height {
            @!grid.push([]);
            my $j := 0;
            while $j < $!width {
                @!grid[$i].push(pir::rand__NN(1.0) < .5 ?? $Tree !! $Empty);
                $j++;
            }
            $i++;
        }
    }

    method init-neighbors () {
        @!neighbors := [ ] xx $!height; # XXX rakudo doesn't autoviv yet
        for ^$!height X ^$!width -> $i, $j {
            @!neighbors[$i][$j] := gather for
                    [-1,-1],[+0,-1],[+1,-1],
                    [-1,+0],(     ),[+1,+0],
                    [-1,+1],[+0,+1],[+1,+1]
            {
                take-rw @!grid[$i + .[0]][$j + .[1]] // next;
            }
        }
    }

    method step () {
        my @new;
        @new := [] xx $!height;   # XXX rakudo doesn't autoviv yet
        for ^$!height X ^$!width -> $i, $j {
            given @!grid[$i][$j] {
                when $Empty   { @new[$i][$j] := pir::rand__NN(1.0) < $!p ?? $Tree !! $Empty }
                when $Tree    { @new[$i][$j] :=
                     (@!neighbors[$i][$j].any === $Burning or pir::rand__NN(1.0) < $!f) ?? $Burning !! $Tree;
                }
                when $Burning { @new[$i][$j] := $Empty }
            }
        }
        for ^$!height X ^$!width -> $i, $j {
            @!grid[$i][$j] := @new[$i][$j];
        }
    }

    method Str () {
        join '', gather for ^$!height -> $i {
            take @show[@!grid[$i].list], "\n";
        }
    }
}

sub MAIN ($w, $h, $steps) {
    my Forest $f .= new($h, $w);
    print "\e[2J$CLEAR";      # ANSI clear screen

    my $i := 0;
    until $i >= $steps {
        print "\e[H";   # ANSI home
        say $i++;
        say $f.Str;
        $f.step;
    }
}
